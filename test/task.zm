
//requires 1.14;

import instructions;
import defs;
import stimuli;
import shuffle;
import output;
//import test_page;
import learn_page;


Block task
{
    on_event:entry()
    {
        // Shuffle everything in the test.
        if (shuffle_test_items() != OK) terminate;
    }

//    Part instructions_learning
//    {
//        on_event:entry()
//        {
////            pause_page.set_text_size(1000, 600);
//            pause_page.set_text(PRE_LEARN_INSTRUCTION, true);
//            pause_page.action(this);
//            control.button_box.enable_all_buttons(CONTINUE);
//        }
//    }
//
//    Block learning_block 
//    {
//        LearnItem        item;   // current item
//
//        on_event:entry()
//        {
//            // It is the user who ends this block. Not a fixed number of trials.
//            num_cycles = -1;
//
//            // Prepare test page: progress bar enabled,
//            // feedback and prompt disabled.
//            learn_page.setup(num_cycles, false, false);
//        }
//
//        on_event:exit()
//        {
//            learn_page.cleanup();
//        }
//
//        Trial trial
//        {
//            on_event:entry()
//            {
//                learn_page.action(
//                    this,
//                    reference_time,
//                    learning_block.cycle
//                    );
//            }
//
//            on_event:exit()
//            {
//                //LearnOutput output;
//                println("is_finished = " + learn_page.is_finished());
//                if (learn_page.is_finished()) {
//                    // set num_cycles to the current cycle to finish this block.
//                    learning_block.num_cycles = learning_block.cycle;
//                }
//            }
//        }
//    }

    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }

    Part pause
    {
        on_event:entry()
        {
            pause_page.set_text(
                "End of the practice part.\n"
                "\n"
                "If you have any questions at this moment please ask the "
                "experimenter now.\n"
                "\n"
//                "<i>Hit Enter when ready to proceed.</i>", 
                "<i>Hit any button on the button-box when ready to "
                "proceed.</i>", 
                true);

            pause_page.action(this);
            control.button_box.enable_all_buttons(CONTINUE);
        }
    }

//    Block test
//    {
//        TestItem        item;   // current item
//
//
//        on_event:entry()
//        {
//            // Randomize test items table.
//            if (shuffle_test_items() != OK) terminate;
//
//            num_cycles = test_items.size;
////            num_cycles = 3;
//
//            // Prepare test page: progress bar enabled, feedback and prompt 
//            // disabled.
//            test_page.setup(num_cycles, false, false);
//        }
//
//
//        on_event:exit()
//        {
//            test_page.cleanup();
//
//            // Save test output table as CSV file.
//            test_output_save();
//        }
//
//
//        Trial trial
//        {
//            on_event:entry()
//            {
//                item = test_items[test.cycle];
//
//                test_page.action(this, item, reference_time, test.cycle);
//            }
//
//
//            on_event:exit()
//            {
//                // Add new row to test output table.
//                TestOutput output;
//                output.trialnum = test.cycle + 1;
//                output.id = item.id;
//                output.type = item.type;
//                output.wordfn = item.wordfn;
//                output.prime = item.prime;
//                output.value = test_page.response.value;
//                output.rt = test_page.response.rt;
//                output.correct = test_page.response.correct;
//                test_output_append(output);
//            }
//        }
//    }


    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }
}


void action(Part caller)
{
    // Activate the task. When the task is done, the registered caller
    // (c.q. the main experiment object) will automatically be signaled.
    task.enter(caller);
}
